import os
import asyncio
from typing import Dict, Set, List

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    BotCommand,
)

API_TOKEN = os.getenv("API_TOKEN")
if not API_TOKEN:
    raise RuntimeError("API_TOKEN environment variable is not set")

bot = Bot(token=API_TOKEN)
dp  = Dispatcher()

# –°—Ö–µ–º–∞ –∫–∞–±–∏–Ω–µ—Ç–∞: 3 —Ä—è–¥–∞ –ø–æ 4 –º–µ—Å—Ç–∞
SEAT_ROWS = [
    ["A1","B1","C1","D1"],
    ["A2","B2","C2","D2"],
    ["A3","B3","C3","D3"],
]

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ chat_id
reserved_seats:   Dict[int, Dict[str,int]] = {}  # {chat_id: {seat: owner_id}}
marketing_seats:  Dict[int, Set[str]]      = {}  # {chat_id: set(seat)}
occupied:         Dict[int, Dict[str,int]] = {}  # {chat_id: {seat: user_id}}
user_seat:        Dict[int, Dict[int,str]] = {}  # {chat_id: {user_id: seat}}
chart_message:    Dict[int, int]           = {}  # {chat_id: message_id}

EMOJI = {
    "free":      "üåï",
    "occupied":  "üåë",
    "reserved":  "üåì",
    "marketing": "ü§ç",
    "plant":     "üåø",
}

def init_chat(cid: int):
    reserved_seats.setdefault(cid, {})
    marketing_seats.setdefault(cid, set())
    occupied.setdefault(cid, {})
    user_seat.setdefault(cid, {})

async def build_chart_html(cid: int) -> str:
    init_chat(cid)
    # —Å—Ç–∞—Ç—É—Å—ã –º–µ—Å—Ç
    status = {}
    for row in SEAT_ROWS:
        for s in row:
            if s in marketing_seats[cid]:
                status[s] = EMOJI["marketing"]
            elif s in occupied[cid]:
                status[s] = EMOJI["occupied"]
            elif s in reserved_seats[cid]:
                status[s] = EMOJI["reserved"]
            else:
                status[s] = EMOJI["free"]

    # —Å–±–æ—Ä–∫–∞ —Å—Ö–µ–º—ã
    lines: List[str] = ["‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û–∫–Ω–æ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"]
    for row in SEAT_ROWS:
        left  = "".join(f"[<i>{s}</i>{status[s]}]" for s in row[:2])
        right = "".join(f"[<i>{s}</i>{status[s]}]" for s in row[2:])
        lines.append(f"{left}    {right}")
    plants = EMOJI["plant"]*6 + "    " + EMOJI["plant"]*6
    lines.append(plants)
    lines.append("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü—Ä–æ—Ö–æ–¥ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")

    # –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ
    out = ["<pre>"] + lines + ["</pre>\n", "–í –æ—Ñ–∏—Å–µ —Å–µ–π—á–∞—Å:"]
    for uid, seat in user_seat[cid].items():
        member = await bot.get_chat_member(cid, uid)
        out.append(f"{member.user.full_name} [{seat}]")
    out.append(f"\n–í—Å–µ–≥–æ –ª—é–¥–µ–π –≤ –æ—Ñ–∏—Å–µ: {len(user_seat[cid])}\n")
    out += [
        "üåï ‚Äî —Å–≤–æ–±–æ–¥–Ω–æ",
        "üåë ‚Äî –∑–∞–Ω—è—Ç–æ",
        "üåì ‚Äî –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ",
        "ü§ç ‚Äî –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)",
    ]
    return "\n".join(out)

def seat_keyboard(cid: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞ –∏ –∫–Ω–æ–ø–∫–∞ '–Ø —É—à—ë–ª', 
    –µ—Å–ª–∏ –≤ –æ—Ñ–∏—Å–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫."""
    init_chat(cid)
    kb = []
    for row in SEAT_ROWS:
        row_btns = []
        for s in row:
            if s in marketing_seats[cid] or s in occupied[cid]:
                continue
            row_btns.append(InlineKeyboardButton(
                text=s,
                callback_data=f"book|{s}"
            ))
        if row_btns:
            kb.append(row_btns)
    # –∫–Ω–æ–ø–∫—É ¬´–Ø —É—à—ë–ª¬ª –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤ –æ—Ñ–∏—Å–µ
    if user_seat[cid]:
        kb.append([InlineKeyboardButton(text="–Ø —É—à—ë–ª", callback_data="leave")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

@dp.message(Command(commands=["attendance"]))
async def cmd_attendance(message: types.Message):
    cid = message.chat.id
    init_chat(cid)
    # –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –º–µ—Å—Ç–∞
    marketing_seats[cid] = {"A2","A3"}
    occupied[cid].clear()
    user_seat[cid].clear()
    reserved_seats[cid].clear()

    chart = await build_chart_html(cid)
    msg   = await bot.send_message(
        chat_id=cid,
        text=chart,
        parse_mode="HTML",
        reply_markup=seat_keyboard(cid)
    )
    chart_message[cid] = msg.message_id

@dp.message(Command(commands=["reserve"]))
async def cmd_reserve(message: types.Message):
    cid = message.chat.id
    init_chat(cid)
    if not message.reply_to_message:
        return await message.reply(
            "–ß—Ç–æ–±—ã –∑–∞–∫—Ä–µ–ø–∏—Ç—å –º–µ—Å—Ç–æ, –æ—Ç–≤–µ—Ç—å—Ç–µ `/reserve <–º–µ—Å—Ç–æ>` –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            parse_mode="Markdown"
        )
    parts = message.text.split()
    if len(parts) != 2:
        return await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. `/reserve <–º–µ—Å—Ç–æ>`", parse_mode="Markdown")
    seat = parts[1].upper()
    if seat not in sum(SEAT_ROWS, []):
        return await message.reply(f"–ú–µ—Å—Ç–∞ `{seat}` –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", parse_mode="Markdown")
    if seat in marketing_seats[cid] or seat in occupied[cid]:
        return await message.reply("–≠—Ç–æ –º–µ—Å—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.", parse_mode="Markdown")

    owner = message.reply_to_message.from_user
    reserved_seats[cid][seat] = owner.id

    chart = await build_chart_html(cid)
    await bot.edit_message_text(
        chat_id=cid,
        message_id=chart_message[cid],
        text=chart,
        parse_mode="HTML",
        reply_markup=seat_keyboard(cid)
    )
    await message.reply(
        f"–ú–µ—Å—Ç–æ <i>{seat}</i> –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –∑–∞ {owner.full_name}.",
        parse_mode="HTML"
    )

@dp.callback_query(lambda c: c.data and c.data.startswith("book|"))
async def book_seat(cb: types.CallbackQuery):
    cid, uid = cb.message.chat.id, cb.from_user.id
    init_chat(cid)
    _, seat = cb.data.split("|")

    # –º–∞—Ä–∫–µ—Ç–∏–Ω–≥
    if seat in marketing_seats[cid]:
        return await cb.answer("–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–µ –º–µ—Å—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.", show_alert=True)

    # –∑–∞–∫—Ä–µ–ø
    owner = reserved_seats[cid].get(seat)
    if owner and owner != uid:
        kb = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="–†–∞–∑—Ä–µ—à–∏—Ç—å", callback_data=f"allow|{seat}|{uid}"),
            InlineKeyboardButton(text="–û—Ç–∫–∞–∑–∞—Ç—å",  callback_data=f"deny|{seat}|{uid}")
        ]])
        owner_name = (await bot.get_chat_member(cid, owner)).user.full_name
        notif = await bot.send_message(
            chat_id=cid,
            text=(
                f"<a href='tg://user?id={owner}'>{owner_name}</a>, "
                f"–º–µ—Å—Ç–æ {seat} —Ö–æ—á–µ—Ç –∑–∞–Ω—è—Ç—å {cb.from_user.full_name}. –†–∞–∑—Ä–µ—à–∏—Ç—å?"
            ),
            parse_mode="HTML",
            reply_markup=kb
        )
        asyncio.create_task(_auto_delete(cid, notif.message_id, 300))
        return await cb.answer()

    if seat in occupied[cid]:
        return await cb.answer("–£–∂–µ –∑–∞–Ω—è—Ç–æ.", show_alert=True)

    prev = user_seat[cid].pop(uid, None)
    if prev:
        occupied[cid].pop(prev, None)
    occupied[cid][seat]    = uid
    user_seat[cid][uid]    = seat

    chart = await build_chart_html(cid)
    await bot.edit_message_text(
        text=chart,
        chat_id=cid,
        message_id=chart_message[cid],
        parse_mode="HTML",
        reply_markup=seat_keyboard(cid)
    )
    await cb.answer("–ú–µ—Å—Ç–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ.")

@dp.callback_query(lambda c: c.data and c.data.startswith("allow|"))
async def allow_cb(cb: types.CallbackQuery):
    cid = cb.message.chat.id
    init_chat(cid)
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    _, seat, req = cb.data.split("|")
    owner     = cb.from_user.id
    requester = int(req)
    if reserved_seats[cid].get(seat) != owner:
        return await cb.answer("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —Ä–∞–∑—Ä–µ—à–∏—Ç—å.", show_alert=True)

    # —É–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    await bot.delete_message(cid, cb.message.message_id)

    if seat in occupied[cid]:
        return await cb.answer("–£–∂–µ –∑–∞–Ω—è—Ç–æ.", show_alert=True)

    prev = user_seat[cid].pop(requester, None)
    if prev:
        occupied[cid].pop(prev, None)
    occupied[cid][seat]        = requester
    user_seat[cid][requester]  = seat

    chart = await build_chart_html(cid)
    await bot.edit_message_text(
        text=chart,
        chat_id=cid,
        message_id=chart_message[cid],
        parse_mode="HTML",
        reply_markup=seat_keyboard(cid)
    )

    member = await bot.get_chat_member(cid, requester)
    mention = f"<a href='tg://user?id={requester}'>{member.user.full_name}</a>"
    notif = await bot.send_message(
        chat_id=cid,
        text=f"{mention}, –≤–∞–º —Ä–∞–∑—Ä–µ—à–∏–ª–∏ –∑–∞–Ω—è—Ç—å –º–µ—Å—Ç–æ {seat}.",
        parse_mode="HTML"
    )
    asyncio.create_task(_auto_delete(cid, notif.message_id, 300))
    await cb.answer()

@dp.callback_query(lambda c: c.data and c.data.startswith("deny|"))
async def deny_cb(cb: types.CallbackQuery):
    cid = cb.message.chat.id
    init_chat(cid)
    _, seat, req = cb.data.split("|")
    owner = cb.from_user.id
    if reserved_seats[cid].get(seat) != owner:
        return await cb.answer("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –æ—Ç–∫–∞–∑–∞—Ç—å.", show_alert=True)

    await bot.delete_message(cid, cb.message.message_id)

    requester = int(req)
    member = await bot.get_chat_member(cid, requester)
    mention = f"<a href='tg://user?id={requester}'>{member.user.full_name}</a>"
    notif = await bot.send_message(
        chat_id=cid,
        text=f"{mention}, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–ª–∞–¥–µ–ª–µ—Ü –æ—Ç–º–µ—Ç–∏–ª –º–µ—Å—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º.",
        parse_mode="HTML"
    )
    asyncio.create_task(_auto_delete(cid, notif.message_id, 300))
    await cb.answer()

@dp.callback_query(lambda c: c.data == "leave")
async def leave_cb(cb: types.CallbackQuery):
    cid, uid = cb.message.chat.id, cb.from_user.id
    init_chat(cid)

    prev = user_seat[cid].pop(uid, None)
    if prev:
        occupied[cid].pop(prev, None)

    chart = await build_chart_html(cid)
    await bot.edit_message_text(
        text=chart,
        chat_id=cid,
        message_id=chart_message[cid],
        parse_mode="HTML",
        reply_markup=seat_keyboard(cid)
    )
    await cb.answer("–ú–µ—Å—Ç–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ.")

async def _auto_delete(chat_id: int, message_id: int, delay: int):
    await asyncio.sleep(delay)
    try:
        await bot.delete_message(chat_id, message_id)
    except:
        pass

async def on_startup():
    await bot.set_my_commands([
        BotCommand("attendance", "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Å–∞–¥–∫—É"),
        BotCommand("reserve",    "–ó–∞–∫—Ä–µ–ø–∏—Ç—å –º–µ—Å—Ç–æ"),
    ])

if __name__ == "__main__":
    dp.run_polling(bot, skip_updates=True, on_startup=on_startup)
